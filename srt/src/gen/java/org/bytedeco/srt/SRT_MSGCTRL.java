// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.srt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.srt.global.srt.*;


@Properties(inherit = org.bytedeco.srt.presets.srt.class)
public class SRT_MSGCTRL extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SRT_MSGCTRL() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SRT_MSGCTRL(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SRT_MSGCTRL(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SRT_MSGCTRL position(long position) {
        return (SRT_MSGCTRL)super.position(position);
    }
    @Override public SRT_MSGCTRL getPointer(long i) {
        return new SRT_MSGCTRL((Pointer)this).offsetAddress(i);
    }

   public native int flags(); public native SRT_MSGCTRL flags(int setter);            // Left for future
   public native int msgttl(); public native SRT_MSGCTRL msgttl(int setter);           // TTL for a message (millisec), default -1 (no TTL limitation)
   public native int inorder(); public native SRT_MSGCTRL inorder(int setter);          // Whether a message is allowed to supersede partially lost one. Unused in stream and live mode.
   public native int boundary(); public native SRT_MSGCTRL boundary(int setter);         // 0:mid pkt, 1(01b):end of frame, 2(11b):complete frame, 3(10b): start of frame
   public native @Cast("int64_t") long srctime(); public native SRT_MSGCTRL srctime(long setter);      // source time since epoch (usec), 0: use internal time (sender)
   public native int pktseq(); public native SRT_MSGCTRL pktseq(int setter);       // sequence number of the first packet in received message (unused for sending)
   public native int msgno(); public native SRT_MSGCTRL msgno(int setter);        // message number (output value for both sending and receiving)
   public native SRT_SOCKGROUPDATA grpdata(); public native SRT_MSGCTRL grpdata(SRT_SOCKGROUPDATA setter);
   public native @Cast("size_t") long grpdata_size(); public native SRT_MSGCTRL grpdata_size(long setter);
}
