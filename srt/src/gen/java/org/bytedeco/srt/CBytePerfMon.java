// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.srt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.srt.global.srt.*;


// Importrant note: please add new fields to this structure to the end and don't remove any existing fields 
@Properties(inherit = org.bytedeco.srt.presets.srt.class)
public class CBytePerfMon extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CBytePerfMon() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CBytePerfMon(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CBytePerfMon(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CBytePerfMon position(long position) {
        return (CBytePerfMon)super.position(position);
    }
    @Override public CBytePerfMon getPointer(long i) {
        return new CBytePerfMon((Pointer)this).offsetAddress(i);
    }

   // global measurements
   public native @Cast("int64_t") long msTimeStamp(); public native CBytePerfMon msTimeStamp(long setter);                // time since the UDT entity is started, in milliseconds
   public native @Cast("int64_t") long pktSentTotal(); public native CBytePerfMon pktSentTotal(long setter);               // total number of sent data packets, including retransmissions
   public native @Cast("int64_t") long pktRecvTotal(); public native CBytePerfMon pktRecvTotal(long setter);               // total number of received packets
   public native int pktSndLossTotal(); public native CBytePerfMon pktSndLossTotal(int setter);            // total number of lost packets (sender side)
   public native int pktRcvLossTotal(); public native CBytePerfMon pktRcvLossTotal(int setter);            // total number of lost packets (receiver side)
   public native int pktRetransTotal(); public native CBytePerfMon pktRetransTotal(int setter);            // total number of retransmitted packets
   public native int pktSentACKTotal(); public native CBytePerfMon pktSentACKTotal(int setter);            // total number of sent ACK packets
   public native int pktRecvACKTotal(); public native CBytePerfMon pktRecvACKTotal(int setter);            // total number of received ACK packets
   public native int pktSentNAKTotal(); public native CBytePerfMon pktSentNAKTotal(int setter);            // total number of sent NAK packets
   public native int pktRecvNAKTotal(); public native CBytePerfMon pktRecvNAKTotal(int setter);            // total number of received NAK packets
   public native @Cast("int64_t") long usSndDurationTotal(); public native CBytePerfMon usSndDurationTotal(long setter);         // total time duration when UDT is sending data (idle time exclusive)
   //>new
   public native int pktSndDropTotal(); public native CBytePerfMon pktSndDropTotal(int setter);            // number of too-late-to-send dropped packets
   public native int pktRcvDropTotal(); public native CBytePerfMon pktRcvDropTotal(int setter);            // number of too-late-to play missing packets
   public native int pktRcvUndecryptTotal(); public native CBytePerfMon pktRcvUndecryptTotal(int setter);       // number of undecrypted packets
   public native @Cast("uint64_t") long byteSentTotal(); public native CBytePerfMon byteSentTotal(long setter);              // total number of sent data bytes, including retransmissions
   public native @Cast("uint64_t") long byteRecvTotal(); public native CBytePerfMon byteRecvTotal(long setter);              // total number of received bytes
   public native @Cast("uint64_t") long byteRcvLossTotal(); public native CBytePerfMon byteRcvLossTotal(long setter);           // total number of lost bytes
   public native @Cast("uint64_t") long byteRetransTotal(); public native CBytePerfMon byteRetransTotal(long setter);           // total number of retransmitted bytes
   public native @Cast("uint64_t") long byteSndDropTotal(); public native CBytePerfMon byteSndDropTotal(long setter);           // number of too-late-to-send dropped bytes
   public native @Cast("uint64_t") long byteRcvDropTotal(); public native CBytePerfMon byteRcvDropTotal(long setter);           // number of too-late-to play missing bytes (estimate based on average packet size)
   public native @Cast("uint64_t") long byteRcvUndecryptTotal(); public native CBytePerfMon byteRcvUndecryptTotal(long setter);      // number of undecrypted bytes
   //<

   // local measurements
   public native @Cast("int64_t") long pktSent(); public native CBytePerfMon pktSent(long setter);                    // number of sent data packets, including retransmissions
   public native @Cast("int64_t") long pktRecv(); public native CBytePerfMon pktRecv(long setter);                    // number of received packets
   public native int pktSndLoss(); public native CBytePerfMon pktSndLoss(int setter);                 // number of lost packets (sender side)
   public native int pktRcvLoss(); public native CBytePerfMon pktRcvLoss(int setter);                 // number of lost packets (receiver side)
   public native int pktRetrans(); public native CBytePerfMon pktRetrans(int setter);                 // number of retransmitted packets
   public native int pktRcvRetrans(); public native CBytePerfMon pktRcvRetrans(int setter);              // number of retransmitted packets received
   public native int pktSentACK(); public native CBytePerfMon pktSentACK(int setter);                 // number of sent ACK packets
   public native int pktRecvACK(); public native CBytePerfMon pktRecvACK(int setter);                 // number of received ACK packets
   public native int pktSentNAK(); public native CBytePerfMon pktSentNAK(int setter);                 // number of sent NAK packets
   public native int pktRecvNAK(); public native CBytePerfMon pktRecvNAK(int setter);                 // number of received NAK packets
   public native double mbpsSendRate(); public native CBytePerfMon mbpsSendRate(double setter);               // sending rate in Mb/s
   public native double mbpsRecvRate(); public native CBytePerfMon mbpsRecvRate(double setter);               // receiving rate in Mb/s
   public native @Cast("int64_t") long usSndDuration(); public native CBytePerfMon usSndDuration(long setter);              // busy sending time (i.e., idle time exclusive)
   public native int pktReorderDistance(); public native CBytePerfMon pktReorderDistance(int setter);         // size of order discrepancy in received sequences
   public native double pktRcvAvgBelatedTime(); public native CBytePerfMon pktRcvAvgBelatedTime(double setter);       // average time of packet delay for belated packets (packets with sequence past the ACK)
   public native @Cast("int64_t") long pktRcvBelated(); public native CBytePerfMon pktRcvBelated(long setter);              // number of received AND IGNORED packets due to having come too late
   //>new
   public native int pktSndDrop(); public native CBytePerfMon pktSndDrop(int setter);                 // number of too-late-to-send dropped packets
   public native int pktRcvDrop(); public native CBytePerfMon pktRcvDrop(int setter);                 // number of too-late-to play missing packets
   public native int pktRcvUndecrypt(); public native CBytePerfMon pktRcvUndecrypt(int setter);            // number of undecrypted packets
   public native @Cast("uint64_t") long byteSent(); public native CBytePerfMon byteSent(long setter);                   // number of sent data bytes, including retransmissions
   public native @Cast("uint64_t") long byteRecv(); public native CBytePerfMon byteRecv(long setter);                   // number of received bytes
   public native @Cast("uint64_t") long byteRcvLoss(); public native CBytePerfMon byteRcvLoss(long setter);                // number of retransmitted bytes
   public native @Cast("uint64_t") long byteRetrans(); public native CBytePerfMon byteRetrans(long setter);                // number of retransmitted bytes
   public native @Cast("uint64_t") long byteSndDrop(); public native CBytePerfMon byteSndDrop(long setter);                // number of too-late-to-send dropped bytes
   public native @Cast("uint64_t") long byteRcvDrop(); public native CBytePerfMon byteRcvDrop(long setter);                // number of too-late-to play missing bytes (estimate based on average packet size)
   public native @Cast("uint64_t") long byteRcvUndecrypt(); public native CBytePerfMon byteRcvUndecrypt(long setter);           // number of undecrypted bytes
   //<

   // instant measurements
   public native double usPktSndPeriod(); public native CBytePerfMon usPktSndPeriod(double setter);             // packet sending period, in microseconds
   public native int pktFlowWindow(); public native CBytePerfMon pktFlowWindow(int setter);              // flow window size, in number of packets
   public native int pktCongestionWindow(); public native CBytePerfMon pktCongestionWindow(int setter);        // congestion window size, in number of packets
   public native int pktFlightSize(); public native CBytePerfMon pktFlightSize(int setter);              // number of packets on flight
   public native double msRTT(); public native CBytePerfMon msRTT(double setter);                      // RTT, in milliseconds
   public native double mbpsBandwidth(); public native CBytePerfMon mbpsBandwidth(double setter);              // estimated bandwidth, in Mb/s
   public native int byteAvailSndBuf(); public native CBytePerfMon byteAvailSndBuf(int setter);            // available UDT sender buffer size
   public native int byteAvailRcvBuf(); public native CBytePerfMon byteAvailRcvBuf(int setter);            // available UDT receiver buffer size
   //>new
   public native double mbpsMaxBW(); public native CBytePerfMon mbpsMaxBW(double setter);                  // Transmit Bandwidth ceiling (Mbps)
   public native int byteMSS(); public native CBytePerfMon byteMSS(int setter);                    // MTU

   public native int pktSndBuf(); public native CBytePerfMon pktSndBuf(int setter);                  // UnACKed packets in UDT sender
   public native int byteSndBuf(); public native CBytePerfMon byteSndBuf(int setter);                 // UnACKed bytes in UDT sender
   public native int msSndBuf(); public native CBytePerfMon msSndBuf(int setter);                   // UnACKed timespan (msec) of UDT sender
   public native int msSndTsbPdDelay(); public native CBytePerfMon msSndTsbPdDelay(int setter);            // Timestamp-based Packet Delivery Delay

   public native int pktRcvBuf(); public native CBytePerfMon pktRcvBuf(int setter);                  // Undelivered packets in UDT receiver
   public native int byteRcvBuf(); public native CBytePerfMon byteRcvBuf(int setter);                 // Undelivered bytes of UDT receiver
   public native int msRcvBuf(); public native CBytePerfMon msRcvBuf(int setter);                   // Undelivered timespan (msec) of UDT receiver
   public native int msRcvTsbPdDelay(); public native CBytePerfMon msRcvTsbPdDelay(int setter);            // Timestamp-based Packet Delivery Delay

   public native int pktSndFilterExtraTotal(); public native CBytePerfMon pktSndFilterExtraTotal(int setter);     // number of control packets supplied by packet filter
   public native int pktRcvFilterExtraTotal(); public native CBytePerfMon pktRcvFilterExtraTotal(int setter);     // number of control packets received and not supplied back
   public native int pktRcvFilterSupplyTotal(); public native CBytePerfMon pktRcvFilterSupplyTotal(int setter);    // number of packets that the filter supplied extra (e.g. FEC rebuilt)
   public native int pktRcvFilterLossTotal(); public native CBytePerfMon pktRcvFilterLossTotal(int setter);      // number of packet loss not coverable by filter

   public native int pktSndFilterExtra(); public native CBytePerfMon pktSndFilterExtra(int setter);          // number of control packets supplied by packet filter
   public native int pktRcvFilterExtra(); public native CBytePerfMon pktRcvFilterExtra(int setter);          // number of control packets received and not supplied back
   public native int pktRcvFilterSupply(); public native CBytePerfMon pktRcvFilterSupply(int setter);         // number of packets that the filter supplied extra (e.g. FEC rebuilt)
   public native int pktRcvFilterLoss(); public native CBytePerfMon pktRcvFilterLoss(int setter);           // number of packet loss not coverable by filter
   public native int pktReorderTolerance(); public native CBytePerfMon pktReorderTolerance(int setter);        // packet reorder tolerance value
   //<

   // New stats in 1.5.0

   // Total
   public native @Cast("int64_t") long pktSentUniqueTotal(); public native CBytePerfMon pktSentUniqueTotal(long setter);         // total number of data packets sent by the application
   public native @Cast("int64_t") long pktRecvUniqueTotal(); public native CBytePerfMon pktRecvUniqueTotal(long setter);         // total number of packets to be received by the application
   public native @Cast("uint64_t") long byteSentUniqueTotal(); public native CBytePerfMon byteSentUniqueTotal(long setter);        // total number of data bytes, sent by the application
   public native @Cast("uint64_t") long byteRecvUniqueTotal(); public native CBytePerfMon byteRecvUniqueTotal(long setter);        // total number of data bytes to be received by the application

   // Local
   public native @Cast("int64_t") long pktSentUnique(); public native CBytePerfMon pktSentUnique(long setter);              // number of data packets sent by the application
   public native @Cast("int64_t") long pktRecvUnique(); public native CBytePerfMon pktRecvUnique(long setter);              // number of packets to be received by the application
   public native @Cast("uint64_t") long byteSentUnique(); public native CBytePerfMon byteSentUnique(long setter);             // number of data bytes, sent by the application
   public native @Cast("uint64_t") long byteRecvUnique(); public native CBytePerfMon byteRecvUnique(long setter);             // number of data bytes to be received by the application
}
