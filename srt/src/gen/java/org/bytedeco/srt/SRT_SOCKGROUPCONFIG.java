// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.srt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.srt.global.srt.*;


@Properties(inherit = org.bytedeco.srt.presets.srt.class)
public class SRT_SOCKGROUPCONFIG extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SRT_SOCKGROUPCONFIG() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SRT_SOCKGROUPCONFIG(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SRT_SOCKGROUPCONFIG(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SRT_SOCKGROUPCONFIG position(long position) {
        return (SRT_SOCKGROUPCONFIG)super.position(position);
    }
    @Override public SRT_SOCKGROUPCONFIG getPointer(long i) {
        return new SRT_SOCKGROUPCONFIG((Pointer)this).offsetAddress(i);
    }

    public native @Cast("SRTSOCKET") int id(); public native SRT_SOCKGROUPCONFIG id(int setter);
    public native @ByRef sockaddr_storage srcaddr(); public native SRT_SOCKGROUPCONFIG srcaddr(sockaddr_storage setter);
    public native @ByRef sockaddr_storage peeraddr(); public native SRT_SOCKGROUPCONFIG peeraddr(sockaddr_storage setter); // Don't want to expose sockaddr_any to public API
    public native @Cast("uint16_t") short weight(); public native SRT_SOCKGROUPCONFIG weight(short setter);
    public native SRT_SOCKOPT_CONFIG config(); public native SRT_SOCKGROUPCONFIG config(SRT_SOCKOPT_CONFIG setter);
    public native int errorcode(); public native SRT_SOCKGROUPCONFIG errorcode(int setter);
    public native int token(); public native SRT_SOCKGROUPCONFIG token(int setter);
}
