// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.client;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.client.*;


/*
 * Modified argument structure for IP_MULTICAST_IF, obtained from Linux.
 * This is used to specify an interface index for multicast sends, as
 * the IPv4 legacy APIs do not support this (unless IP_SENDIF is available).
 */
@Properties(inherit = org.bytedeco.zixi.presets.zixiClient.class)
public class ip_mreqn extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ip_mreqn() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ip_mreqn(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ip_mreqn(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ip_mreqn position(long position) {
        return (ip_mreqn)super.position(position);
    }
    @Override public ip_mreqn getPointer(long i) {
        return new ip_mreqn((Pointer)this).position(position + i);
    }

	public native @ByRef in_addr imr_multiaddr(); public native ip_mreqn imr_multiaddr(in_addr setter);  /* IP multicast address of group */
	public native @ByRef in_addr imr_address(); public native ip_mreqn imr_address(in_addr setter);    /* local IP address of interface */
	public native int imr_ifindex(); public native ip_mreqn imr_ifindex(int setter);    /* Interface index; cast to uint32_t */
}
