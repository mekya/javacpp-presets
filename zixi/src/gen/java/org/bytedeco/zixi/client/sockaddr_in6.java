// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.client;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.client.*;


// #if !__USE_KERNEL_IPV6_DEFS
/* Ditto, for IPv6.  */
@Properties(inherit = org.bytedeco.zixi.presets.zixiClient.class)
public class sockaddr_in6 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public sockaddr_in6() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public sockaddr_in6(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public sockaddr_in6(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public sockaddr_in6 position(long position) {
        return (sockaddr_in6)super.position(position);
    }
    @Override public sockaddr_in6 getPointer(long i) {
        return new sockaddr_in6((Pointer)this).position(position + i);
    }

    public native @Cast("sa_family_t") byte sin6_family(); public native sockaddr_in6 sin6_family(byte setter);
    public native @Cast("in_port_t") short sin6_port(); public native sockaddr_in6 sin6_port(short setter);	/* Transport layer port # */
    public native @Cast("uint32_t") int sin6_flowinfo(); public native sockaddr_in6 sin6_flowinfo(int setter);	/* IPv6 flow information */
    public native @ByRef in6_addr sin6_addr(); public native sockaddr_in6 sin6_addr(in6_addr setter);	/* IPv6 address */
    public native @Cast("uint32_t") int sin6_scope_id(); public native sockaddr_in6 sin6_scope_id(int setter);	/* IPv6 scope-id */
  }
