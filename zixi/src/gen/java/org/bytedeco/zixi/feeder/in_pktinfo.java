// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.feeder;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.feeder.*;
       /* "low" - vouchsafe security */


/*
 * IP_PKTINFO: Packet information (equivalent to  RFC2292 sec 5 for IPv4)
 * This structure is used for
 *
 * 1) Receiving ancilliary data about the datagram if IP_PKTINFO sockopt is
 *    set on the socket. In this case ipi_ifindex will contain the interface
 *    index the datagram was received on, ipi_addr is the IP address the
 *    datagram was received to.
 *
 * 2) Sending a datagram using a specific interface or IP source address.
 *    if ipi_ifindex is set to non-zero when in_pktinfo is passed as
 *    ancilliary data of type IP_PKTINFO, this will be used as the source
 *    interface to send the datagram from. If ipi_ifindex is null, ip_spec_dst
 *    will be used for the source address.
 *
 *    Note: if IP_BOUND_IF is set on the socket, ipi_ifindex in the ancillary
 *    IP_PKTINFO option silently overrides the bound interface when it is
 *    specified during send time.
 */
@Properties(inherit = org.bytedeco.zixi.presets.zixiFeeder.class)
public class in_pktinfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public in_pktinfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public in_pktinfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public in_pktinfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public in_pktinfo position(long position) {
        return (in_pktinfo)super.position(position);
    }
    @Override public in_pktinfo getPointer(long i) {
        return new in_pktinfo((Pointer)this).position(position + i);
    }

	public native @Cast("unsigned int") int ipi_ifindex(); public native in_pktinfo ipi_ifindex(int setter);    /* send/recv interface index */
	public native @ByRef in_addr ipi_spec_dst(); public native in_pktinfo ipi_spec_dst(in_addr setter);   /* Local address */
	public native @ByRef in_addr ipi_addr(); public native in_pktinfo ipi_addr(in_addr setter);       /* IP Header dst address */
}
