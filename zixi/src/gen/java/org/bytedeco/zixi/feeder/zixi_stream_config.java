// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.feeder;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.feeder.*;



// configuration structure
@Properties(inherit = org.bytedeco.zixi.presets.zixiFeeder.class)
public class zixi_stream_config extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public zixi_stream_config() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public zixi_stream_config(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public zixi_stream_config(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public zixi_stream_config position(long position) {
        return (zixi_stream_config)super.position(position);
    }
    @Override public zixi_stream_config getPointer(long i) {
        return new zixi_stream_config((Pointer)this).offsetAddress(i);
    }

	public native @Cast("char*") BytePointer user_id(); public native zixi_stream_config user_id(BytePointer setter);				//	User/Device ID for authorization (null terminated)
	public native @Cast("char*") BytePointer password(); public native zixi_stream_config password(BytePointer setter);				//	Stream password for authorization (null terminated)

	public native @Cast("char*") BytePointer sz_stream_id(); public native zixi_stream_config sz_stream_id(BytePointer setter);			//	Stream name on the broadcaster
	public native int stream_id_max_length(); public native zixi_stream_config stream_id_max_length(int setter);	//	sz_stream_id buffer size
	
	public native @Cast("char*") BytePointer sz_hosts(int i); public native zixi_stream_config sz_hosts(int i, BytePointer setter);
	public native @Cast("char**") PointerPointer sz_hosts(); public native zixi_stream_config sz_hosts(PointerPointer setter);				//	Destination hosts. Array of zero terminated strings. Broadcasters are connected in round-robin.
	public native IntPointer hosts_len(); public native zixi_stream_config hosts_len(IntPointer setter);				//	Array of buffer lengths of sz_hosts
	public native int num_hosts(); public native zixi_stream_config num_hosts(int setter);				//	Number of entries in sz_hosts and hosts_len
	public native @Cast("unsigned short*") ShortPointer port(); public native zixi_stream_config port(ShortPointer setter);					//	Array of destination broadcaster/decoder ports, size of num_hosts. Default=2088
	public native int max_latency_ms(); public native zixi_stream_config max_latency_ms(int setter);			//	Maximal latency for error correction, in milliseconds
	public native @Cast("ZIXI_LATENCY_MODE") int deprecated_latency_mode(); public native zixi_stream_config deprecated_latency_mode(int setter);//	Deprecated. For 1.7 compatibility
	public native int max_bitrate(); public native zixi_stream_config max_bitrate(int setter);			//	Maximal stream bit rate, in bits/second
	public native @Cast("char") byte rtp(); public native zixi_stream_config rtp(byte setter);					//	Source is rtp stream (rtp header will be stripped, no effect if not rtp stream)
	public native @Cast("ZIXI_ADAPTIVE_MODE") int limited(); public native zixi_stream_config limited(int setter);				//	Throttle bitrate - adapt encoder or FEC bitrate (use ZIXI_ENCODER_SETBITRATE_FUNCTION for callbacks)
	public native @Cast("char") byte stop_on_drop(); public native zixi_stream_config stop_on_drop(byte setter);			//	Stop transmission on unrecoverable error until the next GOP. Only useful when allowed latency is shorter than a GOP, and encoder feedback is off. (default=0)
	public native @Cast("char") byte reconnect(); public native zixi_stream_config reconnect(byte setter);				//	Allows reconnection in case of a disconnection during streaming, this might cause the send function to block for several seconds
	public native int fec_overhead(); public native zixi_stream_config fec_overhead(int setter);			//	FEC overhead in % on top of the original stream bitrate
	public native int fec_block_ms(); public native zixi_stream_config fec_block_ms(int setter);			//	Maximum time of FEC block. default=30ms
	public native @Cast("char") byte content_aware_fec(); public native zixi_stream_config content_aware_fec(byte setter);		//	Uneven FEC allocation based on content. default=0
	public native @Cast("ZIXI_ENCRYPTION") int enc_type(); public native zixi_stream_config enc_type(int setter);				//	Encryption type. Constants defined in zixi_defilitions.h
	public native @Cast("char*") BytePointer sz_enc_key(); public native zixi_stream_config sz_enc_key(BytePointer setter);				//	Encryption key - zero terminated string of hex digits. For eg. "1234567890abcdef1234567890abcdef"
	public native @Cast("char") byte use_compression(); public native zixi_stream_config use_compression(byte setter);		//	Reduce redundancies in the original stream. default=1
	public native @Cast("char") byte fast_connect(); public native zixi_stream_config fast_connect(byte setter);			//	Allows clients to connect faster, increases latency. default=0
	public native ZIXI_IO_FUNCTION read_function(); public native zixi_stream_config read_function(ZIXI_IO_FUNCTION setter);			//	Optional external read function
	public native Pointer read_param(); public native zixi_stream_config read_param(Pointer setter);				//	parameter for read function
	public native ZIXI_IO_FUNCTION write_function(); public native zixi_stream_config write_function(ZIXI_IO_FUNCTION setter);			//	Optional external write function
	public native Pointer write_param(); public native zixi_stream_config write_param(Pointer setter);			//	parameter for write function
	public native ZIXI_RELEASE_FUNCTION release_function(); public native zixi_stream_config release_function(ZIXI_RELEASE_FUNCTION setter);		//	Optional external release function
	public native Pointer release_param(); public native zixi_stream_config release_param(Pointer setter);			//	parameter for write function
	public native int smoothing_latency(); public native zixi_stream_config smoothing_latency(int setter);		//	Smoothing latency by PCR, for jittery input. default=0
	public native @Cast("unsigned int") int timeout(); public native zixi_stream_config timeout(int setter);				//	Reconnection timeout, in milliseconds, minimum is 5000, 0 for default
	
	public native zixi_nic_config local_nics(); public native zixi_stream_config local_nics(zixi_nic_config setter);				//	Array of local network interfaces to use
	public native int num_local_nics(); public native zixi_stream_config num_local_nics(int setter);			//	Number of entries in local_ips.  Use bonding mode when num_local_ips>1.
	public native @Cast("char") byte force_bonding(); public native zixi_stream_config force_bonding(byte setter);			//	use bonding mode on a single NIC. default=0
													//  Note: Bonding requires FEC, fec_overhead must be > 0, recommeded value is 10

	public native int max_delay_packets(); public native zixi_stream_config max_delay_packets(int setter);		//	delay packets, allows smoother output bitrate. maximum number of packets to delay. default=0
	public native @Cast("char") byte enforce_bitrate(); public native zixi_stream_config enforce_bitrate(byte setter);		//	max_bitrate is enforcing - don't transmit faster than the max_bitrate parameter, or send operations will fail. max_delay_packets should be none zero. default=0
	public native @Cast("bool") boolean force_padding(); public native zixi_stream_config force_padding(boolean setter);			//  force piecewise CBR on the network - when encoder feedback is on, and 'use_compression' is on
	public native @Cast("bool") boolean elementary_streams(); public native zixi_stream_config elementary_streams(boolean setter);		//  data will be sent as elementary stream, use zixi_send_elementary_frame
	public native int elementary_streams_max_va_diff_ms(); public native zixi_stream_config elementary_streams_max_va_diff_ms(int setter); // maximal difference between audio pts and video dts. default is 250ms
	public native @ByRef zixi_elementary_stream_config elementary_streams_config(); public native zixi_stream_config elementary_streams_config(zixi_elementary_stream_config setter);	// video and audio codecs configuration, used when elementary_streams=1

	public native @Cast("bool") boolean expect_high_jitter(); public native zixi_stream_config expect_high_jitter(boolean setter);		//	When true - jitter has less impact on congestion estimation. Relevant when running over highly jittery networks with diverse arrival times. default=false.

	public native @Cast("bool") boolean must_use_dtls(); public native zixi_stream_config must_use_dtls(boolean setter);			//	Connect only if the connection is using DTLS encryption
	public native @Cast("bool") boolean ignore_dtls_cert_error(); public native zixi_stream_config ignore_dtls_cert_error(boolean setter);	//	Ignore certificate error on DTLS connection. Use with caution, only when server is trusted.
	public native @Cast("bool") boolean replaceable(); public native zixi_stream_config replaceable(boolean setter);			//	Indicates that this stream can be replaced by other streams with the same id on supporting broadcasters (1.11+)

	public native @Cast("ZIXI_PROTOCOL") int protocol(); public native zixi_stream_config protocol(int setter);				//	protocol type: udp/mmt/rist/http/https. When using http/https - only the first host and port parameters are used, and the rest of the paremteters are ignored.
}
