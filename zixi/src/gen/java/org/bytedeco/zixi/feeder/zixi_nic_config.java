// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.feeder;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.feeder.*;


/**
\mainpage  ZIXI Feeder Interface
*/

// network interface configuration structure for bonded mode
@Properties(inherit = org.bytedeco.zixi.presets.zixiFeeder.class)
public class zixi_nic_config extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public zixi_nic_config() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public zixi_nic_config(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public zixi_nic_config(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public zixi_nic_config position(long position) {
        return (zixi_nic_config)super.position(position);
    }
    @Override public zixi_nic_config getPointer(long i) {
        return new zixi_nic_config((Pointer)this).offsetAddress(i);
    }

	public native @Cast("char*") BytePointer nic_ip(); public native zixi_nic_config nic_ip(BytePointer setter);			// ip of local nic to use
	public native @Cast("char*") BytePointer device(); public native zixi_nic_config device(BytePointer setter);			// device name to use (eg. "eth0")

	public native @Cast("bool") boolean backup(); public native zixi_nic_config backup(boolean setter);			// backup nics will only be used in case primary links have insufficient bandwidth
	public native @Cast("unsigned int") int bitrate_limit(); public native zixi_nic_config bitrate_limit(int setter);	// set bitrate limite for this interface, 0 - unlimited [bits/sec]

	public native @Cast("unsigned short") short local_port(); public native zixi_nic_config local_port(short setter);		// local UDP port, 0 for automatic port selection
}
