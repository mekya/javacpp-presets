// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.feeder;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.feeder.*;
 /* 224.0.0.255 */

// #if !__USE_KERNEL_IPV6_DEFS
/* IPv6 address */
@Properties(inherit = org.bytedeco.zixi.presets.zixiFeeder.class)
public class in6_addr extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public in6_addr() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public in6_addr(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public in6_addr(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public in6_addr position(long position) {
        return (in6_addr)super.position(position);
    }
    @Override public in6_addr getPointer(long i) {
        return new in6_addr((Pointer)this).offsetAddress(i);
    }

	@Name("__in6_u.__u6_addr8") public native @Cast("uint8_t") byte __in6_u___u6_addr8(int i); public native in6_addr __in6_u___u6_addr8(int i, byte setter);
	@Name("__in6_u.__u6_addr8") @MemberGetter public native @Cast("uint8_t*") BytePointer __in6_u___u6_addr8();
	@Name("__in6_u.__u6_addr16") public native @Cast("uint16_t") short __in6_u___u6_addr16(int i); public native in6_addr __in6_u___u6_addr16(int i, short setter);
	@Name("__in6_u.__u6_addr16") @MemberGetter public native @Cast("uint16_t*") ShortPointer __in6_u___u6_addr16();
	@Name("__in6_u.__u6_addr32") public native @Cast("uint32_t") int __in6_u___u6_addr32(int i); public native in6_addr __in6_u___u6_addr32(int i, int setter);
	@Name("__in6_u.__u6_addr32") @MemberGetter public native @Cast("uint32_t*") IntPointer __in6_u___u6_addr32();
// #define s6_addr			__in6_u.__u6_addr8
// #ifdef __USE_MISC
// #endif
  }
