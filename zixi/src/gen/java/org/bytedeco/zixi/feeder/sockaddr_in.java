// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.feeder;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.feeder.*;
                     /* official! */
// #endif  /* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */

/*
 * Socket address, internet style.
 */
@Properties(inherit = org.bytedeco.zixi.presets.zixiFeeder.class)
public class sockaddr_in extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public sockaddr_in() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public sockaddr_in(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public sockaddr_in(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public sockaddr_in position(long position) {
        return (sockaddr_in)super.position(position);
    }
    @Override public sockaddr_in getPointer(long i) {
        return new sockaddr_in((Pointer)this).position(position + i);
    }

	public native @Cast("__uint8_t") byte sin_len(); public native sockaddr_in sin_len(byte setter);
	public native @Cast("sa_family_t") byte sin_family(); public native sockaddr_in sin_family(byte setter);
	public native @Cast("in_port_t") short sin_port(); public native sockaddr_in sin_port(short setter);
	public native @ByRef in_addr sin_addr(); public native sockaddr_in sin_addr(in_addr setter);
	public native @Cast("char") byte sin_zero(int i); public native sockaddr_in sin_zero(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer sin_zero();
}
