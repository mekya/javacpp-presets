// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.feeder;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.feeder.*;


// configuration structure for automatic remote RTMP output
@Properties(inherit = org.bytedeco.zixi.presets.zixiFeeder.class)
public class zixi_rtmp_out_config extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public zixi_rtmp_out_config() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public zixi_rtmp_out_config(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public zixi_rtmp_out_config(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public zixi_rtmp_out_config position(long position) {
        return (zixi_rtmp_out_config)super.position(position);
    }
    @Override public zixi_rtmp_out_config getPointer(long i) {
        return new zixi_rtmp_out_config((Pointer)this).offsetAddress(i);
    }

	// optional parameters - set to NULL to disable
	public native @Cast("char*") BytePointer stream_name(); public native zixi_rtmp_out_config stream_name(BytePointer setter);						
	public native @Cast("char*") BytePointer url(); public native zixi_rtmp_out_config url(BytePointer setter);					// rtmp://host:port/app
	public native @Cast("char*") BytePointer user(); public native zixi_rtmp_out_config user(BytePointer setter);
	public native @Cast("char*") BytePointer password(); public native zixi_rtmp_out_config password(BytePointer setter);
	public native @Cast("char*") BytePointer backup_url(); public native zixi_rtmp_out_config backup_url(BytePointer setter);				// alternative RTMP url target
	public native @Cast("unsigned char") byte hot_backup(); public native zixi_rtmp_out_config hot_backup(byte setter);				// when 1, both 'url' and 'backup_url' will be connected. otherwise- either 'url' or 'backup_url' will connect

	// video and audio metadata fields
	// -------------------------------

	public native @Cast("unsigned int") int bitrate(); public native zixi_rtmp_out_config bitrate(int setter);				// bits/second
	public native @Cast("unsigned int") int max_va_diff(); public native zixi_rtmp_out_config max_va_diff(int setter);			// maximal number of frames saved for video/audio interleaving. default - set to 1000
	public native @Cast("unsigned char") byte reconnection_period(); public native zixi_rtmp_out_config reconnection_period(byte setter);	// seconds

	public native @Cast("unsigned short") short video_width(); public native zixi_rtmp_out_config video_width(short setter);			// pixels
	public native @Cast("unsigned short") short video_height(); public native zixi_rtmp_out_config video_height(short setter);			// pixels
	public native @Cast("unsigned int") int video_bitrate(); public native zixi_rtmp_out_config video_bitrate(int setter);			// bits/second
	public native @Cast("unsigned int") int audio_bitrate(); public native zixi_rtmp_out_config audio_bitrate(int setter);			// bits/second
	public native @Cast("unsigned int") int audio_samplerate(); public native zixi_rtmp_out_config audio_samplerate(int setter);		// samples/second, 0 for video only
	public native @Cast("unsigned char") byte audio_channels(); public native zixi_rtmp_out_config audio_channels(byte setter);			// 1-mono, 2-stereo
	public native @Cast("unsigned char") byte audio_sample_size(); public native zixi_rtmp_out_config audio_sample_size(byte setter);		// bits per sample
	public native @Cast("unsigned char") byte audio_aot(); public native zixi_rtmp_out_config audio_aot(byte setter);				// AAC audio object type, according to ISO/IEC 13818-7. 0=Main profile, 1=AAC-LC, 2=SSR
	public native @Cast("unsigned char") byte video_frame_rate(); public native zixi_rtmp_out_config video_frame_rate(byte setter);		// frames/second
	public native @Cast("unsigned char") byte video_avc_profile(); public native zixi_rtmp_out_config video_avc_profile(byte setter);		// 66-baseline, 77-main, 100-high
	public native @Cast("unsigned char") byte video_avc_level(); public native zixi_rtmp_out_config video_avc_level(byte setter);		// video level times 10, for example, 51 means level=5.1
	public native @Cast("unsigned short") short video_gop_size(); public native zixi_rtmp_out_config video_gop_size(short setter);			// frames/gop
	public native @Cast("ZIXI_VIDEO_CODECS") int video_codec(); public native zixi_rtmp_out_config video_codec(int setter);		//h264 and hevc supported
	public native @Cast("ZIXI_AUDIO_CODECS") int audio_codec(); public native zixi_rtmp_out_config audio_codec(int setter);		//aac and opus supported
	public native ZIXI_RTMP_WRITE_DATA_EXTERNAL external_write(); public native zixi_rtmp_out_config external_write(ZIXI_RTMP_WRITE_DATA_EXTERNAL setter);
	public native ZIXI_RTMP_READ_DATA_EXTERNAL external_read(); public native zixi_rtmp_out_config external_read(ZIXI_RTMP_READ_DATA_EXTERNAL setter);
	public native Pointer user_param(); public native zixi_rtmp_out_config user_param(Pointer setter);
/*
	_zixi_rtmp_out_config() : stream_name(0), url(0), user(0), password(0), backup_url(0), hot_backup(false), bitrate(0), max_va_diff(1000), reconnection_period(3), 
		video_width(0), video_height(0), video_bitrate(0), audio_bitrate(0), audio_samplerate(0), audio_channels(0), audio_sample_size(0), audio_aot(0), video_frame_rate(0),
		video_avc_profile(0), video_avc_level(0), video_gop_size(0) {}
*/

}
