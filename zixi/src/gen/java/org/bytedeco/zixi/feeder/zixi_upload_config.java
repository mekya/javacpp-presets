// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.zixi.feeder;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.zixi.global.feeder.*;


// configuration structure for file upload
@Properties(inherit = org.bytedeco.zixi.presets.zixiFeeder.class)
public class zixi_upload_config extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public zixi_upload_config() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public zixi_upload_config(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public zixi_upload_config(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public zixi_upload_config position(long position) {
        return (zixi_upload_config)super.position(position);
    }
    @Override public zixi_upload_config getPointer(long i) {
        return new zixi_upload_config((Pointer)this).position(position + i);
    }

	public native @Cast("char*") BytePointer user_id(); public native zixi_upload_config user_id(BytePointer setter);				//	User/Device ID for authorization (null terminated)
	public native @Cast("char*") BytePointer password(); public native zixi_upload_config password(BytePointer setter);				//	Password for authorization (null terminated)

	public native @Cast("char*") BytePointer file_path(); public native zixi_upload_config file_path(BytePointer setter);				//	Local file path. when uploading data from memory, use file_path as target file name
	public native @Cast("char*") BytePointer host(); public native zixi_upload_config host(BytePointer setter);					//	Remote broadcaster address
	public native @Cast("unsigned short") short port(); public native zixi_upload_config port(short setter);					//	Remote broadcaster port (default 2088)
	public native int mtu(); public native zixi_upload_config mtu(int setter);					//  Set network MTU (default: 1462, min: 576)
	public native @Cast("char*") BytePointer target_path(); public native zixi_upload_config target_path(BytePointer setter);			//	Target upload path on remote broadcaster
	public native @Cast("uint64_t") long initial_bitrate(); public native zixi_upload_config initial_bitrate(long setter);		// 	initial upload bitrate, in bits/second. if 0 initial bitrate = max bitrate
	public native @Cast("uint64_t") long max_bitrate(); public native zixi_upload_config max_bitrate(long setter);			// 	Maximum upload bitrate, in bits/second
	public native @Cast("char") byte growing_file(); public native zixi_upload_config growing_file(byte setter);			//  Indicate that the file is still open and growing.  Call 'zixi_finalize_upload' when file is done growing.
	public native @Cast("ZIXI_ENCRYPTION") int enc_type(); public native zixi_upload_config enc_type(int setter);				//	Encryption type. Constants defined in zixi_defilitions.h
	public native @Cast("char*") BytePointer sz_enc_key(); public native zixi_upload_config sz_enc_key(BytePointer setter);				//	Encryption key - zero terminated string of hex digits. For eg. "1234567890abcdef1234567890abcdef"
	public native @Cast("bool") boolean mmt(); public native zixi_upload_config mmt(boolean setter);					//	Use MMT protocol
	public native @Cast("bool") boolean overwrite(); public native zixi_upload_config overwrite(boolean setter);				//	Overwrite existing file on server side if it exists
	public native @Cast("bool") boolean delete_partial(); public native zixi_upload_config delete_partial(boolean setter);			//  Set to true to delete partial uploaded file on disconnect
	public native @Cast("FILE*") Pointer file_handle(); public native zixi_upload_config file_handle(Pointer setter);			//  if not set to INVALID_FILE_HANDLE - will use the file handle and not the path

	public native @Cast("unsigned char*") BytePointer data_ptr(); public native zixi_upload_config data_ptr(BytePointer setter);				// upload data located in memory. growing_file must be 0
	public native long data_size(); public native zixi_upload_config data_size(long setter);				// data size in bytes
	public native @Cast("bool") boolean ignore_dtls_cert_error(); public native zixi_upload_config ignore_dtls_cert_error(boolean setter);	// Ignore certificate error on DTLS connection. Use with caution, only when server is trusted.
	public native @Cast("bool") boolean must_use_dtls(); public native zixi_upload_config must_use_dtls(boolean setter);			// Use only DTLS. When false - automatically detect if DTLS can be used.
}
